import streamlit as st
import spacy
from spacy import displacy
import stanza
from transformers import AutoTokenizer, AutoModelForTokenClassification, pipeline
import pandas as pd
import html
import matplotlib.pyplot as plt
import spacy.cli
spacy.cli.download("fr_core_news_md")

@st.cache_resource
def load_spacy_model():
    return spacy.load("fr_core_news_md")

@st.cache_resource
def load_stanza_model():
    stanza.download("fr")
    return stanza.Pipeline(lang="fr", processors="tokenize,ner")

@st.cache_resource
def load_camembert_pipeline():
    tokenizer = AutoTokenizer.from_pretrained("Babelscape/wikineural-multilingual-ner", use_fast=True)
    model = AutoModelForTokenClassification.from_pretrained("Babelscape/wikineural-multilingual-ner")
    return pipeline("ner", model=model, tokenizer=tokenizer, aggregation_strategy="simple")

@st.cache_resource
def load_custom_finetuned_pipeline():
    model_name = "Jean-Baptiste/camembert-ner"  # mod√®le fine-tun√© public
    tokenizer = AutoTokenizer.from_pretrained(model_name, use_fast=True)
    model = AutoModelForTokenClassification.from_pretrained(model_name)
    return pipeline("ner", model=model, tokenizer=tokenizer, aggregation_strategy="simple")

# Fonction pour graphique color√©
def colored_bar_chart(freq_series, label_colors):
    fig, ax = plt.subplots()
    bars = ax.bar(freq_series.index, freq_series.values, color=[label_colors.get(label, "#e0e0e0") for label in freq_series.index])
    ax.set_ylabel("Nombre d'entit√©s")
    ax.set_title("Fr√©quence par type d'entit√©")
    return fig

# Configuration de la page
st.set_page_config(page_title="üß† NER Presse", layout="wide")

# Sidebar
st.sidebar.title("üõ†Ô∏è Param√®tres NER")
model_choice = st.sidebar.selectbox(
    "Choisir le mod√®le NER",
    ["spaCy", "Stanza", "CamemBERT (HuggingFace)", "Mod√®le Fine-Tun√©"]
)
st.sidebar.markdown("---")

# Titre principal
st.title("üì∞ Reconnaissance d'Entit√©s Nomm√©es (NER) dans la Presse")
st.markdown(
    "<div style='font-size: 1.05rem'>D√©posez votre texte ou article ci-dessous. Les entit√©s (personnes, lieux, organisations...) seront automatiquement d√©tect√©es, surlign√©es et pr√©sent√©es dans des onglets.</div>",
    unsafe_allow_html=True
)

text_input = st.text_area("‚úçÔ∏è Entrez un article de presse en fran√ßais :", height=200)

if st.button("üîç Analyser"):
    if text_input.strip() != "":
        ents = []
        label_colors = {
            "PER": "#a5d6a7",
            "ORG": "#90caf9",
            "LOC": "#fff59d",
            "MISC": "#ce93d8"
        }

        colored_text = text_input

        if model_choice == "spaCy":
            nlp = load_spacy_model()
            doc = nlp(text_input)
            ents = [
                {"Texte": ent.text, "Type": ent.label_, "D√©but": ent.start_char, "Fin": ent.end_char}
                for ent in doc.ents
            ]
            offset = 0
            for ent in sorted(doc.ents, key=lambda e: e.start_char):
                ent_text = html.escape(ent.text)
                color = label_colors.get(ent.label_, "#e0e0e0")
                span = f"<span style='background-color: {color}; border-radius: 4px; padding: 0 2px; font-weight: bold'>{ent_text}</span>"
                start = ent.start_char + offset
                end = ent.end_char + offset
                colored_text = colored_text[:start] + span + colored_text[end:]
                offset += len(span) - (end - start)

        elif model_choice == "Stanza":
            nlp = load_stanza_model()
            doc = nlp(text_input)
            ents = [
                {"Texte": ent.text, "Type": ent.type, "D√©but": ent.start_char, "Fin": ent.end_char}
                for ent in doc.ents
            ]
            offset = 0
            for ent in sorted(doc.ents, key=lambda e: e.start_char):
                ent_text = html.escape(ent.text)
                color = label_colors.get(ent.type, "#e0e0e0")
                span = f"<span style='background-color: {color}; border-radius: 4px; padding: 0 2px; font-weight: bold'>{ent_text}</span>"
                start = ent.start_char + offset
                end = ent.end_char + offset
                colored_text = colored_text[:start] + span + colored_text[end:]
                offset += len(span) - (end - start)

        elif model_choice == "CamemBERT (HuggingFace)":
            pipe = load_camembert_pipeline()
            results = pipe(text_input)
            results = [ent for ent in results if ent.get("start") is not None and ent.get("end") is not None]
            offset = 0
            for ent in sorted(results, key=lambda x: x['start']):
                ent_text = html.escape(ent['word'])
                color = label_colors.get(ent["entity_group"], "#e0e0e0")
                span = f"<span style='background-color: {color}; border-radius: 4px; padding: 0 2px; font-weight: bold'>{ent_text}</span>"
                start = ent['start'] + offset
                end = ent['end'] + offset
                colored_text = colored_text[:start] + span + colored_text[end:]
                offset += len(span) - (end - start)
                ents.append({
                    "Texte": ent["word"],
                    "Type": ent["entity_group"],
                    "D√©but": ent["start"],
                    "Fin": ent["end"]
                })

        elif model_choice == "Mod√®le Fine-Tun√©":
            pipe = load_custom_finetuned_pipeline()
            results = pipe(text_input)
            results = [ent for ent in results if ent.get("start") is not None and ent.get("end") is not None]
            offset = 0
            for ent in sorted(results, key=lambda x: x['start']):
                ent_text = html.escape(ent['word'])
                color = label_colors.get(ent["entity_group"], "#e0e0e0")
                span = f"<span style='background-color: {color}; border-radius: 4px; padding: 0 2px; font-weight: bold'>{ent_text}</span>"
                start = ent['start'] + offset
                end = ent['end'] + offset
                colored_text = colored_text[:start] + span + colored_text[end:]
                offset += len(span) - (end - start)
                ents.append({
                    "Texte": ent["word"],
                    "Type": ent["entity_group"],
                    "D√©but": ent["start"],
                    "Fin": ent["end"]
                })

        tab1, tab2, tab3, tab4 = st.tabs(["üìÑ Texte annot√©", "üìã Entit√©s", "üìä Fr√©quence", "‚ÑπÔ∏è Statistiques mod√®le"])

        with tab1:
            st.markdown(f"<div style='line-height: 1.6; font-size: 1.1em'>{colored_text}</div>", unsafe_allow_html=True)
            st.markdown("---")
            st.markdown("### üé® L√©gende des couleurs")
            for label, color in label_colors.items():
                st.markdown(f"<span style='background-color: {color}; padding: 4px 8px; border-radius: 4px; margin-right: 6px'>{label}</span>", unsafe_allow_html=True)

        with tab2:
            if ents:
                st.dataframe(pd.DataFrame(ents))
            else:
                st.info("Aucune entit√© nomm√©e d√©tect√©e.")

        with tab3:
            if ents:
                freq = pd.Series([e["Type"] for e in ents]).value_counts()
                fig = colored_bar_chart(freq, label_colors)
                st.pyplot(fig)
            else:
                st.info("Pas de donn√©es pour le graphique.")

        with tab4:
            if model_choice == "spaCy":
                st.markdown("**Mod√®le :** `fr_core_news_md` (spaCy)")
                st.markdown("**F1-score NER :** ~85% (donn√©es WikiNER)")
            elif model_choice == "Stanza":
                st.markdown("**Mod√®le :** `stanza fr` (UD French-GSD)")
                st.markdown("**F1-score NER :** ~80% selon les benchmarks UD")
            elif model_choice == "CamemBERT (HuggingFace)":
                st.markdown("**Mod√®le :** `wikineural-multilingual-ner`")
                st.markdown("**Langues :** multilingue, fine-tun√© sur WikiANN")
                st.markdown("**F1-score moyen :** ~86% (langues europ√©ennes)")
            elif model_choice == "Mod√®le Fine-Tun√©":
                st.markdown("**Mod√®le :** `Jean-Baptiste/camembert-ner`")
                st.markdown("**Corpus :** WikiNER fran√ßais")
                st.markdown("**F1-score :** ~87.6% sur donn√©es WikiNER")
    else:
        st.warning("Veuillez saisir un texte.")
